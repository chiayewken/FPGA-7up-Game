/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_6 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] fout,
    output reg [2:0] error,
    output reg overflow
  );
  
  
  
  wire [16-1:0] M_add_out;
  wire [3-1:0] M_add_error;
  reg [16-1:0] M_add_a;
  reg [16-1:0] M_add_b;
  reg [6-1:0] M_add_alufn;
  adder_11 add (
    .a(M_add_a),
    .b(M_add_b),
    .alufn(M_add_alufn),
    .out(M_add_out),
    .error(M_add_error)
  );
  
  wire [16-1:0] M_cmp_out;
  wire [3-1:0] M_cmp_error;
  reg [1-1:0] M_cmp_z;
  reg [1-1:0] M_cmp_v;
  reg [1-1:0] M_cmp_n;
  reg [6-1:0] M_cmp_alufn;
  compare_12 cmp (
    .z(M_cmp_z),
    .v(M_cmp_v),
    .n(M_cmp_n),
    .alufn(M_cmp_alufn),
    .out(M_cmp_out),
    .error(M_cmp_error)
  );
  
  wire [16-1:0] M_shift_out;
  wire [3-1:0] M_shift_error;
  reg [16-1:0] M_shift_a;
  reg [16-1:0] M_shift_b;
  reg [6-1:0] M_shift_alufn;
  shifter_13 shift (
    .a(M_shift_a),
    .b(M_shift_b),
    .alufn(M_shift_alufn),
    .out(M_shift_out),
    .error(M_shift_error)
  );
  
  wire [16-1:0] M_bool_out;
  wire [3-1:0] M_bool_error;
  reg [16-1:0] M_bool_a;
  reg [16-1:0] M_bool_b;
  reg [6-1:0] M_bool_alufn;
  boolean_14 bool (
    .a(M_bool_a),
    .b(M_bool_b),
    .alufn(M_bool_alufn),
    .out(M_bool_out),
    .error(M_bool_error)
  );
  
  wire [1-1:0] M_zvn_z;
  wire [1-1:0] M_zvn_v;
  wire [1-1:0] M_zvn_n;
  reg [16-1:0] M_zvn_a;
  reg [16-1:0] M_zvn_b;
  reg [16-1:0] M_zvn_sout;
  reg [6-1:0] M_zvn_alufn;
  zvnvalues_15 zvn (
    .a(M_zvn_a),
    .b(M_zvn_b),
    .sout(M_zvn_sout),
    .alufn(M_zvn_alufn),
    .z(M_zvn_z),
    .v(M_zvn_v),
    .n(M_zvn_n)
  );
  
  always @* begin
    M_add_a = a;
    M_add_b = b;
    M_add_alufn = alufn;
    M_zvn_a = a;
    M_zvn_b = b;
    M_zvn_alufn = alufn;
    M_zvn_sout = M_add_out;
    M_bool_a = a;
    M_bool_b = b;
    M_bool_alufn = alufn;
    M_cmp_z = M_zvn_z;
    M_cmp_v = M_zvn_v;
    M_cmp_n = M_zvn_n;
    M_cmp_alufn = alufn;
    M_shift_a = a;
    M_shift_b = b;
    M_shift_alufn = alufn;
    fout = 1'h0;
    error = 1'h0;
    overflow = 1'h0;
    
    case (alufn[4+1-:2])
      2'h0: begin
        fout = M_add_out;
        error = M_add_error;
        overflow = M_zvn_v;
      end
      2'h1: begin
        fout = M_bool_out;
        error = M_bool_error;
      end
      2'h2: begin
        fout = M_shift_out;
        error = M_shift_error;
      end
      2'h3: begin
        fout = M_cmp_out;
        error = M_cmp_error;
      end
    endcase
  end
endmodule
